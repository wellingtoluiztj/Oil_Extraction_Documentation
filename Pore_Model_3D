# -*- coding: utf-8 -*-
"""
Created on Wed Jun  1 15:22:32 2022

@author: welli
"""
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d.art3d import Poly3DCollection

from skimage import measure
from skimage.draw import ellipsoid


# Generate a level set about zero of two identical ellipsoids in 3D
ellipse_3D = ellipsoid(10, 10, 10, levelset=True)


concat = np.dstack([ellipse_3D, ellipse_3D, ellipse_3D])
coord = []
for i in range(len(concat[0][:][:])):
    for j in range(len(concat[:][0][:])):
        for k in range(len(concat[:][:][0])):
            if concat[i,j,k] < 1.19:
                coord.append([i,j,k]) 

            
file = open('obst-wall_3D.d90', 'w')
np.savetxt(file, coord, fmt = '%i')


# Use marching cubes to obtain the surface mesh of these ellipsoids
verts, faces, normals, values = measure.marching_cubes(concat, 0.0001)

# Display resulting triangular mesh using Matplotlib. This can also be done
# with mayavi (see skimage.measure.marching_cubes_lewiner docstring).
fig = plt.figure(figsize=(20, 20))
ax = fig.add_subplot(111, projection='3d')

# Fancy indexing: verts[faces] to generate a collection of triangles
mesh = Poly3DCollection(verts[faces])
mesh.set_edgecolor('k')
ax.add_collection3d(mesh)

ax.set_xlabel("x")
ax.set_ylabel("y")
ax.set_zlabel("z")

ax.set_xlim(0, 60)  # a = 6 (times two for 2nd ellipsoid)
ax.set_ylim(0, 60)  # b = 10
ax.set_zlim(0, 60)  # c = 16

plt.tight_layout()
plt.show()
